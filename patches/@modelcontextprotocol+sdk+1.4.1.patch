diff --git a/node_modules/@modelcontextprotocol/sdk/dist/cjs/client/stdio.js b/node_modules/@modelcontextprotocol/sdk/dist/cjs/client/stdio.js
index fd896e7..8b880a9 100644
--- a/node_modules/@modelcontextprotocol/sdk/dist/cjs/client/stdio.js
+++ b/node_modules/@modelcontextprotocol/sdk/dist/cjs/client/stdio.js
@@ -8,6 +8,7 @@ exports.getDefaultEnvironment = getDefaultEnvironment;
 const node_child_process_1 = require("node:child_process");
 const node_process_1 = __importDefault(require("node:process"));
 const stdio_js_1 = require("../shared/stdio.js");
+
 /**
  * Environment variables to inherit by default, if an environment is not explicitly given.
  */
diff --git a/node_modules/@modelcontextprotocol/sdk/dist/esm/client/stdio.js b/node_modules/@modelcontextprotocol/sdk/dist/esm/client/stdio.js
index 332689e..21f2a22 100644
--- a/node_modules/@modelcontextprotocol/sdk/dist/esm/client/stdio.js
+++ b/node_modules/@modelcontextprotocol/sdk/dist/esm/client/stdio.js
@@ -1,4 +1,5 @@
-import { spawn } from "node:child_process";
+import { ChildProcess, IOType } from "node:child_process";
+import spawn from "cross-spawn";
 import process from "node:process";
 import { ReadBuffer, serializeMessage } from "../shared/stdio.js";
 /**
@@ -59,7 +60,7 @@ export class StdioClientTransport {
         return new Promise((resolve, reject) => {
             var _a, _b, _c, _d, _e, _f;
             this._process = spawn(this._serverParams.command, (_a = this._serverParams.args) !== null && _a !== void 0 ? _a : [], {
-                env: (_b = this._serverParams.env) !== null && _b !== void 0 ? _b : getDefaultEnvironment(),
+                env: (_b = this._serverParams.env) !== null && _b !== void 0 ? { ...getDefaultEnvironment(), ..._b } : getDefaultEnvironment(),
                 stdio: ["pipe", "pipe", (_c = this._serverParams.stderr) !== null && _c !== void 0 ? _c : "inherit"],
                 shell: false,
                 signal: this._abortController.signal,
