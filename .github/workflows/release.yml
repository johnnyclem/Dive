name: Release Build

on:
  push:
    branches: [main]
    tags:
      - "v*"

jobs:
  version:
    runs-on: 
      group: KubeRunners
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Get version from package.json
        id: get_version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "$VERSION" > ./version_tag.txt
      - uses: actions/upload-artifact@v4
        with:
          name: version-tag
          path: ./version_tag.txt


  release:
    needs: [version]
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: darwin
            arch: x64
          - os: macos-latest
            platform: darwin
            arch: arm64
    runs-on: ${{ matrix.os }}


    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install the Apple certificate and provisioning profile
        if: matrix.platform == 'darwin'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          # KEYCHAIN_PASSWORD: 
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - uses: actions/download-artifact@v4
        with:
          name: version-tag
      - name: Get version from artifact
        id: get_version
        shell: bash
        run: |
          echo "VERSION=$(cat ./version_tag.txt)" >> $GITHUB_ENV
      - name: Confirm Version From artifact
        shell: bash
        run: |
          echo "Version from package.json: ${{ env.VERSION }}"

      - name: Install dependencies
        run: npm ci

      # - name: Download Prebuilt binary
      #   if: matrix.platform == 'windows'
      #   run: npm run download:windows-bin

      - name: Create release directory
        run: mkdir -p output

      # - name: Build Windows
      #   if: matrix.platform == 'windows'
      #   shell: bash
      #   run: |
      #     npm run package:windows-installers
      #     ls -al release/${{ env.VERSION }}
      #     echo "Moving exe file to output directory"
      #     mv release/${{ env.VERSION }}/*.exe output/
      #     mv release/${{ env.VERSION }}/latest.yml output/

      - name: Build macOS
        if: matrix.platform == 'darwin'
        env:
          CSC_LINK: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          CSC_KEY_PASSWORD: ${{ secrets.P12_PASSWORD }}
          APPLEID: ${{ secrets.APPLEID }}
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
          APPLETEAMID: ${{ secrets.APPLETEAMID }}
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            npm run package:darwin-dmg:arm64
          else
            npm run package:darwin-dmg:x64
          fi
          ls -al release/${{ env.VERSION }}
          echo "Moving dmg file to output directory"
          mv release/${{ env.VERSION }}/*.dmg output/

      # - name: Build Linux
      #   if: matrix.platform == 'linux'
      #   run: |
      #     npm run package:linux
      #     ls -al release/${{ env.VERSION }}
      #     echo "Moving AppImage and tar.gz files to output directory"
      #     mv release/${{ env.VERSION }}/*.{AppImage,tar.gz} output/
      #     mv release/${{ env.VERSION }}/latest-linux.yml output/

      # TODO skip if production and add another production tag release
      - name: Create Dev Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: dev-${{ env.VERSION }}
          name: |
            Souls Developer Release ${{ env.VERSION }}
          files: output/*
          body: |
            Build details:
            
            ${{ github.event.head_commit.message }}
          prerelease: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_PAT }}

  notify:
    needs: [release]
    runs-on: 
      group: KubeRunners
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: version-tag
      - name: Confirm git commit SHA output
        run: |
          echo "VERSION=$(cat ./version_tag.txt)" >> $GITHUB_ENV
          echo "Version from package.json: ${{ env.VERSION }}"

      # TODO only do if dev build. Add anohter for production release
      - name: Post a message in a channel
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SOULS_NOTIFIER_SLACK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "*Successful Souls Release Build*: ${{ job.status }}\n dev-${{ env.VERSION }}"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*Successful Souls Release Build*: ${{ job.status }}\n dev-${{ env.VERSION }} \n\nRelease Assets: \nhttps://github.com/Ai-Layer-Labs/souls-electron-redux/releases/tag/dev-${{ env.VERSION }}"
    
  notify_failure:
    if: ${{ failure() }}
    runs-on: 
      group: KubeRunners
    steps:
      # TODO only do if dev build. Add anohter for production release
      - name: Notify failure of release
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SOULS_NOTIFIER_SLACK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "*Failed Souls Release Build*: ${{ job.status }}\n
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*Failed Souls Release Build*: ${{ job.status }}\n Please review errors in Action errors."
    